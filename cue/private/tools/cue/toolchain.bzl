# We must accommodate loading this file from repositories generated by
# our repository rules.
visibility("public")

_TOOLS_BY_RELEASE = {
    "v0.14.1": {
        struct(os = "darwin", arch = "amd64"): "61e4931a122c9a706429b76bd7275505a0b75edeb078e0bf2d6352d6b9f7b02b",
        struct(os = "darwin", arch = "arm64"): "54e7d5e694c85dbae40fa8e1b73894950fd8854e4fe64b57550aa8ff19bfcbf6",
        struct(os = "linux", arch = "amd64"): "c7d29f5988d088627cf53bd6a223807c466066cf432c7cf5c36429ffc9e734f6",
        struct(os = "linux", arch = "arm64"): "486dcd03b27553bca4f0289fe2cb9e1f2c3c025bd053675c72b0c13577364b46",
        struct(os = "windows", arch = "amd64"): "b2289feb775db9d10de6c039ffeccc8afb7a7fe0c656af891f8fce7f38aa1d8a",
        struct(os = "windows", arch = "arm64"): "3ba4b950b1880aec6f3ddd5d96f43648e4e0ff58151ffc17375068ef9ebf361a",
    },
    "v0.14.0": {
        struct(os = "darwin", arch = "amd64"): "bcbe7d6c2139f6b116945112c17687a25cf60a36deef4f3d5af873bc7e4260bf",
        struct(os = "darwin", arch = "arm64"): "9f1a88e2ccabe12f24bbd3934ab8a487ccfa78df2aae1183b9b39c26bded9a7a",
        struct(os = "linux", arch = "amd64"): "5733fe3a138eaacf8f8298f22c568e3ad55b3141971c1be9151906217fc2ee6a",
        struct(os = "linux", arch = "arm64"): "f987b1f8cba359973a3050ac276d01e29162cda1de6a4ddb135ff6186bfa6f02",
        struct(os = "windows", arch = "amd64"): "9041f014820924e4fde7bb2c295f4da63e9ad6590f92d73e6c4bc37abe5f2077",
        struct(os = "windows", arch = "arm64"): "045878cf337143b54ccaff2718c4dd2431922ad53182a17d088e7a3d731b032b",
    },
    "v0.13.2": {
        struct(os = "darwin", arch = "amd64"): "5e125159a49524b7bb481285c890821fc98b11411f0b84c13691821897a2ab24",
        struct(os = "darwin", arch = "arm64"): "d098864d07e03499351aef0010901efea2770284664273445aaa5417c21b8e2d",
        struct(os = "linux", arch = "amd64"): "a3a48787bdf5d4ffa8ce36d5a015e2badc5963eebb578fdefea3befc9e4befb9",
        struct(os = "linux", arch = "arm64"): "999e81961cf4f3d5eaeb886413d9e36dca064e7f0578f95029545bfccd1a6e7a",
        struct(os = "windows", arch = "amd64"): "9c5513c5bbae3aab5b906611e8e487a999bfb69851ed3267d4ff3c488269c271",
        struct(os = "windows", arch = "arm64"): "b97ac155f753ff58633ec50985ff5ba90c719a5f1fbc59ea2b84e6ce2c026555",
    },
    "v0.13.1": {
        struct(os = "darwin", arch = "amd64"): "6e2a853b15e018a55f9f51a54c4410f1f7815d77a2832911e9ffacaeedb1cb0f",
        struct(os = "darwin", arch = "arm64"): "5b4936a0a1ed739ab862c04a3700a5b5119d40ce0e15f7b403641486a36a1633",
        struct(os = "linux", arch = "amd64"): "74e84f705af23d521895acfcd782bd75457616b6ce9507525345c6941e295c1a",
        struct(os = "linux", arch = "arm64"): "33ac30f7183fe72c913981a97b6de0c7d9a49555155dcca0fb85345125ad75b7",
        struct(os = "windows", arch = "amd64"): "934f10f81e3fea059594029c84fd0ae49c4d746f463654daf4a06c10b0a369b0",
        struct(os = "windows", arch = "arm64"): "4d6df90a83e6be1ef8eef997877df6bcafb9b97763a303b962d2815b92560516",
    },
    "v0.13.0": {
        struct(os = "darwin", arch = "amd64"): "a31d34e22a9c3082fbfaaa9a9b8ef92085b4cbd95090cc67efc2e4fb501e2030",
        struct(os = "darwin", arch = "arm64"): "d70bcd278b8b20c78d550fa6a59da88b5fa65688ff3e8fc32a5aeec39aa4868a",
        struct(os = "linux", arch = "amd64"): "59ba96137da07cd2cdd2e17ec33af81f850126f022f25dd96516f0b42071b6a9",
        struct(os = "linux", arch = "arm64"): "59dcf4af25bf872decb44e2a706d75f822b32bbd06e83252cd181a177957ad00",
        struct(os = "windows", arch = "amd64"): "a17423528e176f984ae4778fe5c757955783985913a8e18d6ccc663eaf91c279",
        struct(os = "windows", arch = "arm64"): "fef57df2265c9ce92426ea698c9bf38e053f6b579a5f7cf1b8963926252aac00",
    },
    "v0.12.1": {
        struct(os = "darwin", arch = "amd64"): "a39201b519d26388074fdb5aaafc653e98bade9e3d4472d4044f75a6888bfcba",
        struct(os = "darwin", arch = "arm64"): "3eb7180adc231503b519cfa0934c0f856a2ad850d84ad3f6988bf86f6b2ace9f",
        struct(os = "linux", arch = "amd64"): "40ef0a84594494c953945fb297842d3168c92170694928c9565cc0b581235ac5",
        struct(os = "linux", arch = "arm64"): "ee296a58a17cc9141ad9abfd25e33faefd3fdb376e27fe6e599ceadb12fd0901",
        struct(os = "windows", arch = "amd64"): "a80b570bd5d2d7d7e653f3c8689b37a7396a98d486901a14954f1ef6a83bd275",
        struct(os = "windows", arch = "arm64"): "61563bf81f0020bf7b6dd7f69b981f0e77dd0a014b17323905236623ca3ca705",
    },
    "v0.12.0": {
        struct(os = "darwin", arch = "amd64"): "8474e522a978ecadef49b06d706ff276cd07629b1aa107b88adfc1284d3f93cc",
        struct(os = "darwin", arch = "arm64"): "7055a6423f753c8ea763699d48d78d341e8543397399daee281c66ecdc9ec5a5",
        struct(os = "linux", arch = "amd64"): "e55cd5abd98a592c110f87a7da9ef15bc72515200aecfe1bed04bf86311f5ba1",
        struct(os = "linux", arch = "arm64"): "488012bb0e5c080e2a9694ef8765403dd1075a4ec373dda618efa2d37b47f14f",
        struct(os = "windows", arch = "amd64"): "268bf95f4767b37d5db01450d55ca9d10e9a8bd8a1417c31dff456b5f9775abf",
        struct(os = "windows", arch = "arm64"): "91ad090eb86b0d21186d8de0a7b985d235b27e67cd464f7738663e457b042505",
    },
}

_DEFAULT_TOOL_VERSION = "v0.14.1"

def known_release_versions():
    return _TOOLS_BY_RELEASE.keys()

CUEInfo = provider(
    doc = "Details pertaining to the CUE toolchain.",
    fields = {
        "tool": "CUE tool to invoke",
        "version": "This tool's released version name",
    },
)

CUEToolInfo = provider(
    doc = "Details pertaining to the CUE tool.",
    fields = {
        "binary": "CUE tool to invoke",
        "version": "This tool's released version name",
    },
)

def _cue_tool_impl(ctx):
    return [CUEToolInfo(
        binary = ctx.executable.binary,
        version = ctx.attr.version,
    )]

cue_tool = rule(
    implementation = _cue_tool_impl,
    attrs = {
        "binary": attr.label(
            mandatory = True,
            allow_single_file = True,
            executable = True,
            cfg = "exec",
            doc = "CUE tool to invoke",
        ),
        "version": attr.string(
            mandatory = True,
            doc = "This tool's released version name",
        ),
    },
)

def _toolchain_impl(ctx):
    tool = ctx.attr.tool[CUEToolInfo]
    toolchain_info = platform_common.ToolchainInfo(
        cueinfo = CUEInfo(
            tool = tool.binary,
            version = tool.version,
        ),
    )
    return [toolchain_info]

cue_toolchain = rule(
    implementation = _toolchain_impl,
    attrs = {
        "tool": attr.label(
            mandatory = True,
            providers = [CUEToolInfo],
            cfg = "exec",
            doc = "CUE tool to use for validating and exporting data.",
        ),
    },
)

# buildifier: disable=unnamed-macro
def declare_cue_toolchains(cue_tool):
    for version, platforms in _TOOLS_BY_RELEASE.items():
        for platform in platforms.keys():
            cue_toolchain(
                name = "{}_{}_{}".format(platform.os, platform.arch, version),
                tool = cue_tool,
            )

def _translate_host_platform(ctx):
    # NB: This is adapted from rules_go's "_detect_host_platform" function.
    os = ctx.os.name
    if os == "mac os x":
        os = "darwin"
    elif os.startswith("windows"):
        os = "windows"

    arch = ctx.os.arch
    if arch == "aarch64":
        arch = "arm64"
    elif arch == "x86_64":
        arch = "amd64"

    return os, arch

_MODULE_REPOSITORY_NAME = "rules_cue"
_CONTAINING_PACKAGE_PREFIX = "//cue/private/tools/cue"

def _download_tool_impl(ctx):
    if not ctx.attr.arch and not ctx.attr.os:
        os, arch = _translate_host_platform(ctx)
    else:
        if not ctx.attr.arch:
            fail('"os" is set but "arch" is not')
        if not ctx.attr.os:
            fail('"arch" is set but "os" is not')
        os, arch = ctx.attr.os, ctx.attr.arch
    version = ctx.attr.version

    sha256sum = _TOOLS_BY_RELEASE[version][struct(os = os, arch = arch)]
    if not sha256sum:
        fail('No CUE tool is available for OS "{}" and CPU architecture "{}" at version {}'.format(os, arch, version))
    ctx.report_progress('Downloading CUE tool for OS "{}" and CPU architecture "{}" at version {}.'.format(os, arch, version))
    ctx.download_and_extract(
        url = "https://github.com/cue-lang/cue/releases/download/{version}/cue_{version}_{os}_{arch}.{extension}".format(
            version = version,
            os = os,
            arch = arch,
            extension = "zip" if os == "windows" else "tar.gz",
        ),
        sha256 = sha256sum,
    )

    ctx.template(
        "BUILD.bazel",
        Label("{}:BUILD.tool.bazel".format(_CONTAINING_PACKAGE_PREFIX)),
        executable = False,
        substitutions = {
            "{containing_package_prefix}": "@{}{}".format(_MODULE_REPOSITORY_NAME, _CONTAINING_PACKAGE_PREFIX),
            "{extension}": ".exe" if os == "windows" else "",
            "{version}": version,
        },
    )
    return None

_download_tool = repository_rule(
    implementation = _download_tool_impl,
    attrs = {
        "arch": attr.string(),
        "os": attr.string(),
        "version": attr.string(
            values = _TOOLS_BY_RELEASE.keys(),
            default = _DEFAULT_TOOL_VERSION,
        ),
    },
)

# buildifier: disable=unnamed-macro
def declare_bazel_toolchains(version, tool_repo_prefix):
    native.constraint_value(
        name = version,
        constraint_setting = "{}:tool_version".format(_CONTAINING_PACKAGE_PREFIX),
    )
    constraint_value_prefix = "@{}//cue/private/tools".format(_MODULE_REPOSITORY_NAME)
    for platform in _TOOLS_BY_RELEASE[version].keys():
        native.toolchain(
            name = "{}_{}_{}_toolchain".format(platform.os, platform.arch, version),
            exec_compatible_with = [
                "{}:cpu_{}".format(constraint_value_prefix, platform.arch),
                "{}:os_{}".format(constraint_value_prefix, platform.os),
            ],
            toolchain = tool_repo_prefix + "-{os}-{arch}//:{os}_{arch}_{version}".format(arch = platform.arch, os = platform.os, version = version),
            toolchain_type = "@{}//tools/cue:toolchain_type".format(_MODULE_REPOSITORY_NAME),
        )

def _toolchains_impl(ctx):
    ctx.template(
        "BUILD.bazel",
        Label("{}:BUILD.toolchains.bazel".format(_CONTAINING_PACKAGE_PREFIX)),
        executable = False,
        substitutions = {
            "{containing_package_prefix}": "@{}{}".format(_MODULE_REPOSITORY_NAME, _CONTAINING_PACKAGE_PREFIX),
            "{tool_repo}": ctx.attr.tool_repo,
            "{version}": ctx.attr.version,
        },
    )

_toolchains_repo = repository_rule(
    implementation = _toolchains_impl,
    attrs = {
        "tool_repo": attr.string(mandatory = True),
        "version": attr.string(
            values = _TOOLS_BY_RELEASE.keys(),
            default = _DEFAULT_TOOL_VERSION,
        ),
    },
)

def download_tool(name, version = None):
    version = version or _DEFAULT_TOOL_VERSION
    if version not in _TOOLS_BY_RELEASE:
        fail("Unexpected version {} for cue tool. Available versions: {}".format(version, ", ".join(_TOOLS_BY_RELEASE.keys())))
    for platform in _TOOLS_BY_RELEASE[version].keys():
        repo_name = "{}-{}-{}".format(name, platform.os, platform.arch)
        _download_tool(
            name = repo_name,
            arch = platform.arch,
            os = platform.os,
            version = version,
        )
    _toolchains_repo(
        name = name + "_toolchains",
        tool_repo = name,
        version = version,
    )
